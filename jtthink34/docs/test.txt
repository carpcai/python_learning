要点速递

在很多情况下，Java8 都能提升应用性能，而无需任何改变或性能调优。
Lambda 表达式、 Streams API 以及现有类的新方法都是提高生产力的重要工具。
Java8 新推出的 Optional 类型在处理 null 值时，能减少 NullPointerExceptions 的可能性，给开发者极大的灵活度。
去年年初，Java8 登场，现在 Java7 便已行将就木。在明年底 Java9 推出之前，Java8 是 Oracle 唯一支持的版本。然而，许多公司都将稳定性放在第一位，所以都还在用 Java7，甚至 Java6。

让我们来了解一下 Java8 的一些特性，让你在说服团队升级 Java 版本时理由能更充分一些。

速度更快

可以取悦老板、满足业务或运营人员的一大卖点是：Java8 运行应用时速度更快。通常，升级至 Java8 的应用都能得到速度上的提升，即便没有做任何改变或调优。对于为了迎合特定 JVM 而做出调整的应用，这或许并不适用。但 Java8 性能更优的理由还有很多：

常见数据结构的性能提升：对广受欢迎的 HashMap 进行的基准测试表明，它们在 Java8 中的性能更好。这种提升非常吸引人——你无需学习新的 Streams API 或 Lambda 语法，甚至不需要改变现有的代码，就能提升应用的性能。

垃圾回收器提升：通常，Java 应用性能取决于垃圾回收的效率。的确，糟糕的垃圾回收会很大程度上影响应用性能。Java8 对垃圾回收做了很多改变，能有效提升性能并简化调优。最为人熟知的改变是 PermGen 的移除与 Metaspace 的引入。

Fork/Join 速度提升：fork/join 框架是在 Java7 中首次引入的，目的是简化使用 JVM 的并发程序。Java8 中投入了很多努力进一步提升该框架。现在，fork/join 在 Streams API 中用于并发操作。

此外，Java8 中还包含诸多改进以支持并发。Oracle 在 JDK 8 中总结了这些性能提升。